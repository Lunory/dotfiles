
" Vim TextEditor Configuration
" Gadzhi Gadzhiev <gadzhi@gadzhiev.com>
" https://github.com/resure/dotfiles

set nocompatible

filetype off
set rtp+=~/.vim/bundle/vundle
call vundle#begin()

Plugin 'gmarik/vundle'            " Plugins management

Plugin 'CSApprox'                 " Color schemes

Plugin 'Shougo/unite.vim'             " Tool for creating plugin interfaces
Plugin 'Shougo/vimproc.vim'

Plugin 'crookedneighbor/bufexplorer'  " Cool buffers switcher

Plugin 'junegunn/fzf'             " Bindings for very fast go powered fuzzy file finder

Plugin 'airblade/vim-gitgutter'   " Show git changes on the left of the line numbers
map <leader>tg :GitGutterToggle<CR>
let g:gitgutter_enabled = 1
let g:gitgutter_realtime = 0

Plugin 'majutsushi/tagbar'        " Analyse and show tags of the current file in the split
nmap <F8> :TagbarToggle<CR>

" TODO
" Plugin 'ctags.vim'
" Plugin 'szw/vim-tags'

Plugin 'tpope/vim-fugitive'       " Git bindings
Plugin 'tpope/vim-eunuch'         " UNIX Shell bindings
Plugin 'tpope/vim-repeat'         " Repeat support for many things
Plugin 'tpope/vim-speeddating'    " Use CTRL-A/CTRL-X to increment dates, times, and more
Plugin 'tpope/vim-unimpaired'     " Pairs of handy bracket mappings
Plugin 'tpope/vim-commentary'     " Comment stuff out
Plugin 'tpope/vim-surround'       " Quoting/parenthesizing made simple
" Plugin 'svermeulen/vim-easyclip'  " Simplified clipboard functionality
" Plugin 'sickill/vim-pasta'        " Improved pasting experience

Plugin 'tpope/vim-vinegar'        " Improved filesystem exploring
Plugin 'tpope/vim-rsi'            " Readline!
Plugin 'tpope/vim-endwise'        " Some auto "end" insertings
Plugin 'tpope/vim-haystack'       " Fuzzy matching for vim plugins

Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'edkolev/tmuxline.vim'

                                  " Editorconfig support
Plugin 'editorconfig/editorconfig-vim'
let g:EditorConfig_exclude_patterns = ['fugitive://.*']

                                  " Things for snippets
Plugin 'MarcWeber/vim-addon-mw-utils'
Plugin 'tomtom/tlib_vim'
Plugin 'garbas/vim-snipmate'
Plugin 'honza/vim-snippets'

Plugin 'mattn/emmet-vim'          " Expand css-like selectors to html code

Plugin 'tpope/vim-dispatch'       " Heavy external commands dispatcher

Plugin 'tpope/vim-projectionist'  " Projects config plugin



                                  " Languages and frameworks

                                  " JavaScript world
Plugin 'othree/yajs.vim'          " Nice js syntax support
Plugin 'mustache/vim-mustache-handlebars'
Plugin 'maksimr/vim-yate'         " Yandex guys really like bicycles
Plugin 'moll/vim-node'            " Some useful hotkeys for nodejs
Plugin 'maksimr/vim-jsbeautify'   " Beautify based on editorconfig
Plugin 'othree/javascript-libraries-syntax.vim'
let g:used_javascript_libs = 'underscore,backbone,jasmine,chai,handlebars'
Plugin 'heavenshell/vim-jsdoc'    " Well, it's for jsdoc
Plugin 'scrooloose/syntastic'
let g:syntastic_always_populate_loc_list = 0
let g:syntastic_auto_loc_list = 0
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 0
let g:syntastic_mode_map = { "mode": "passive" }
" let g:syntastic_mode_map = {
"         \ "mode": "active",
"         \ "active_filetypes": ["ruby", "php"],
"         \ "passive_filetypes": ["javascript"] }
Plugin 'marijnh/tern_for_vim'


Plugin 'vim-ruby/vim-ruby'        " Ruby world
Plugin 'tpope/vim-rake'
Plugin 'tpope/vim-bundler'
Plugin 'tpope/vim-rails'
Plugin 'kchmck/vim-coffee-script' " It's here because I only use CoffeeScript in rails projects
Plugin 'slim-template/vim-slim'


                                  " CSS world
Plugin 'tpope/vim-haml'           " It's for SCSS actually
Plugin 'hail2u/vim-css3-syntax'
Plugin 'wavded/vim-stylus'


                                  " Omni complete based on color highlighting
Plugin 'vim-scripts/SyntaxComplete'
if has("autocmd") && exists("+omnifunc")
autocmd Filetype *
        \	if &omnifunc == "" |
        \		setlocal omnifunc=syntaxcomplete#Complete |
        \	endif
endif


                                  " Additional color schemes
Plugin 'sjl/badwolf'
Plugin 'chriskempson/vim-tomorrow-theme'
Plugin 'dhruvasagar/vim-railscasts-theme'
Plugin 'yosiat/oceanic-next-vim'

call vundle#end()

filetype plugin indent on         " Required for Vundle
syntax enable

set t_Co=256

set nowrap                        " Don't wrap lines
set scrolloff=7                   " Show 3 lines of context around the cursor.
set tabstop=4 shiftwidth=4        " A tab is two spaces
set expandtab                     " Use spaces, not tabs
set backspace=indent,eol,start    " Backspace through everything in insert mode

                                  " Some good defaults for vim-sensitive
                                  " TODO Explain all this options
set complete-=i
set smarttab
set autoindent
set nrformats-=octal
set ttimeout
set ttimeoutlen=100
set lazyredraw
" set formatoptions+=j
set autoread
if &history < 1000
  set history=1000
endif
if &tabpagemax < 50
  set tabpagemax=50
endif
if !empty(&viminfo)
  set viminfo^=!
endif
set sessionoptions-=options

set modelines=0                   " Preventing some security exploits.

set backupdir=~/.vim/_backup      " Where to put backup files.
set directory=~/.vim/_temp        " Where to put swap files.

" TODO disabled because it provokes strange bug with disappearing cursor on
" navigation up or down from line with cursor on matched brace
" set showcmd                       " Display incomplete commands and mode you're in
" set showmode

set visualbell                    " Disable visual bell.

set encoding=utf-8                " Set main encoding.

set hidden                        " Enhanced command line completion (hiding instead of closing)

set wildmenu                      " Enhanced command line completion.
set wildmode=list:longest,full

set title                         " Set the terminal's title.
set ttyfast                       " Indicates a fast terminal connection.

set ruler                         " Show the current line and column number.
set number                        " Show line numbers.

set laststatus=2                  " Show the status line all the time.

hi StatusLine ctermbg=white ctermfg=darkblue
hi StatusLineNC ctermbg=black ctermfg=grey
highlight Search ctermfg=White ctermbg=Blue

set ignorecase                    " Case-sensitive search.
set smartcase

set gdefault                      " Applying substitutions globally on lines.

set incsearch                     " Highlighting search results.
set showmatch
set hlsearch

" set wrap                         " Making Vim handle long lines correctly.
" set textwidth=79
" set linebreak
" set formatoptions=qrn1

set list                          " Better invisible characters.
set listchars=tab:▸\ ,eol:¬

set mouse=a                       " Some stuff to get the mouse going in term.
set ttymouse=xterm2

set splitbelow
set splitright

let mapleader = ","               " Setup leader key.

" Delete all trailing whitespacces
map <leader>u :%s/\s\+$//<CR>

" Easier commands
nnoremap ; :
vnoremap ; :

" Turning off vim's regex chars
nnoremap / /\v
vnoremap / /\v

" Re-hardwrap paragraphs of text
nnoremap <leader>q gqip

" Reselect pasted text
nnoremap <leader>v V`]

" Quicker Escaping
inoremap jj <ESC>

" Working with split windows
nnoremap <leader>g <C-w>v<C-w>l
nnoremap <leader>s <C-w>s<C-w>l

" Navigating around the splits
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l


" Tab mappings
map <leader>tt :tabnew<CR>
map <leader>te :tabedit
map <leader>tc :tabclose<CR>
map <leader>to :tabonly<CR>
map <leader>tn :tabnext<CR>
map <leader>tp :tabprevious<CR>
map <leader>tf :tabfirst<CR>
map <leader>tl :tablast<CR>
map <leader>tm :tabmove

map <leader>. :set nu!<CR>:set paste!<CR>:set list!<CR>



" Tagline
nmap <F8> :TagbarToggle<CR>

" Clear out a search
nnoremap <leader><space> :noh<cr>

" Fast switch between two last files
nnoremap <leader><leader> <c-^>

" GUI
source ~/.vim/gui

" Fast switch between two last files
nnoremap <leader><leader> <c-^>

" gist-vim
let g:gist_open_browser_after_post = 1
let g:gist_post_private = 1
let g:gist_detect_filetype = 1

" mustache
let g:mustache_abbreviations = 1

" literate coffeescript
autocmd FileType litcoffee runtime ftplugin/coffee.vim

" custom syntax highlighting
au BufRead,BufNewFile {Capfile,Gemfile,Rakefile,Thorfile,bluepill.pill,config.ru,.caprc,.irbrc,irb_tempfile*} set ft=ruby

" turn off default mode indicator
" set noshowmode

" Line under the status line
set ruf=%32(%l\ %c\ [%Y/%{&ff}/%{strlen(&fenc)?&fenc:'none'}]\ %p%%%)

" Some configs for diffs
highlight! link DiffText Todo
highlight DiffAdd    cterm=bold ctermfg=15 ctermbg=115
highlight DiffDelete cterm=bold ctermfg=15 ctermbg=166
highlight DiffChange cterm=bold ctermfg=15 ctermbg=108
highlight DiffText   cterm=bold ctermfg=16 ctermbg=39

map <leader>; :redraw!<CR>
map <leader>S :!cp % ~/tmp/tosay && sh ~/.bin/say_tmp && rm ~/tmp/tosay<CR>

color Tomorrow-Night-Bright
" Switching between two good themes
" TODO Make this work correctly when switching back to mvim
" (currently colors are breaking during that)
function! s:SwitchTheme()
    if exists('g:current_theme')
        if g:current_theme == 'macvim'
            let g:current_theme = 'tomorrow'
            AirlineTheme kolor
            color Tomorrow-Night-Bright
        elseif g:current_theme == 'tomorrow'
            let g:current_theme = 'macvim'
            AirlineTheme papercolor
            color mvim
        endif
    else
        let g:current_theme = 'tomorrow'
        AirlineTheme kolor
        color Tomorrow-Night-Eighties
    endif
endfunction
map <silent> <F6> :call <SID>SwitchTheme()<CR>


" function! s:GoToTheDarkSide()
"     AirlineTheme kolor
"     color OceanicNext
" endfunction
" map <silent> <F6> :call <SID>GoToTheDarkSide()<CR>

map <F7> mzgg=G`z           " Reformat buffer

map <F9> :Dispatch!<CR>
map <leader>r :Dispatch<CR>
map <leader>t :FZF<CR>
nnoremap <leader>a :Ag
nnoremap <leader>a :<C-u>Unite grep:. -buffer-name=search-buffer<CR>
if executable('pt')
  let g:unite_source_grep_command = 'pt'
  let g:unite_source_grep_default_opts = '--nogroup --nocolor'
  let g:unite_source_grep_recursive_opt = ''
  let g:unite_source_grep_encoding = 'utf-8'
endif
nnoremap <leader>e :BufExplorer<cr>
nnoremap <leader>q :bd<cr>
nnoremap <leader>m :ccl<cr>:pc<cr> " Closing annoying scratch and quickfix buffers

let g:airline_powerline_fonts = 1
let g:airline_theme = 'kolor'
" let g:airline_theme = 'luna'
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#show_tabs = 1
let g:airline#extensions#tabline#tab_min_count = 2
let g:airline#extensions#tabline#show_buffers = 0
